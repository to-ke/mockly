import { useEffect, useRef, useState } from 'react'
import { useVoice } from '@/stores/voice'
import { cn } from '@/lib/cn'
import type { TranscriptWord } from '@/stores/voice'

interface LiveTranscriptProps {
    className?: string
    apiBase: string
    pollingInterval?: number
}

/**
 * LiveTranscript component displays real-time word-level transcription
 * by polling the live_transcription.json file generated by the backend.
 */
export function LiveTranscript({ 
    className, 
    apiBase,
    pollingInterval = 500 
}: LiveTranscriptProps) {
    const { liveTranscript, setLiveTranscript, setTranscriptError } = useVoice()
    const [currentTime, setCurrentTime] = useState(0)
    const intervalRef = useRef<number | null>(null)
    const lastUpdateRef = useRef<string | null>(null)
    const startTimeRef = useRef<number>(Date.now())
    
    // Poll for transcript updates
    useEffect(() => {
        const pollTranscript = async () => {
            try {
                const response = await fetch(`${apiBase}/live_transcription.json`, {
                    cache: 'no-store',
                })
                
                if (!response.ok) {
                    // File might not exist yet, that's okay
                    if (response.status === 404) {
                        return
                    }
                    throw new Error(`HTTP ${response.status}`)
                }
                
                const data = await response.json()
                
                // Only update if the data changed
                if (data.last_updated !== lastUpdateRef.current) {
                    lastUpdateRef.current = data.last_updated
                    setLiveTranscript(data)
                    setTranscriptError(null)
                }
            } catch (error) {
                const message = error instanceof Error ? error.message : 'Failed to load transcript'
                console.warn('Transcript polling error:', message)
                // Don't show error to user for every poll failure
            }
        }
        
        // Initial poll
        pollTranscript()
        
        // Set up polling interval
        intervalRef.current = window.setInterval(pollTranscript, pollingInterval)
        
        return () => {
            if (intervalRef.current) {
                clearInterval(intervalRef.current)
            }
        }
    }, [apiBase, pollingInterval, setLiveTranscript, setTranscriptError])
    
    // Update current time for highlighting active words
    useEffect(() => {
        const updateTime = () => {
            const elapsed = (Date.now() - startTimeRef.current) / 1000
            setCurrentTime(elapsed)
        }
        
        const timeInterval = setInterval(updateTime, 50)
        
        return () => clearInterval(timeInterval)
    }, [])
    
    // Reset start time when transcript starts
    useEffect(() => {
        if (liveTranscript && liveTranscript.word_count > 0) {
            startTimeRef.current = Date.now()
        }
    }, [liveTranscript?.word_count])
    
    if (!liveTranscript || liveTranscript.word_count === 0) {
        return (
            <div className={cn('text-xs text-muted-foreground italic', className)}>
                Waiting for transcription...
            </div>
        )
    }
    
    return (
        <div className={cn('space-y-1', className)}>
            <div className="flex items-center justify-between text-xs text-muted-foreground">
                <span>Live Transcript</span>
                <span>{liveTranscript.word_count} words</span>
            </div>
            
            <div className="max-h-32 overflow-y-auto rounded-lg bg-muted/30 p-2">
                <div className="flex flex-wrap gap-1 text-sm leading-relaxed">
                    {liveTranscript.transcription.map((word, index) => (
                        <TranscriptWord
                            key={`${index}-${word.word}`}
                            word={word}
                            currentTime={currentTime}
                        />
                    ))}
                </div>
            </div>
            
            <div className="text-xs text-muted-foreground">
                Last updated: {new Date(liveTranscript.last_updated).toLocaleTimeString()}
            </div>
        </div>
    )
}

interface TranscriptWordProps {
    word: TranscriptWord
    currentTime: number
}

function TranscriptWord({ word, currentTime }: TranscriptWordProps) {
    const isActive = currentTime >= word.start_time && currentTime < word.end_time
    const isPast = currentTime >= word.end_time
    
    return (
        <span
            className={cn(
                'inline-block rounded px-1 py-0.5 transition-colors duration-150',
                isActive && 'bg-primary text-primary-foreground font-medium',
                isPast && 'text-foreground/70',
                !isActive && !isPast && 'text-foreground/50'
            )}
            title={`${word.start_time.toFixed(2)}s - ${word.end_time.toFixed(2)}s`}
        >
            {word.word}
        </span>
    )
}

