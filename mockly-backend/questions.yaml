title: "Questions"
metadata:
  author: "Mockly Team"
  created: "2025-10-24"

languages:
  - Python
  - Java
  - JavaScript
  - TypeScript
  - C++

difficulties:
  - difficulty: easy
    problems:
      - title: "Two Sum (Unique Pair)"
        statement: |
          Given an array of integers nums and an integer target, return indices
          of the two numbers such that they add up to target. Assume exactly one
          solution and you may not use the same element twice.
        input_format: |
          - nums: integer array (length 2..1e5, |nums[i]| <= 1e9)
          - target: integer (|target| <= 1e9)
        output_format: |
          - integer array of length 2 (0-indexed indices, i < j)
        examples:
          - name: basic
            input: { nums: [2,7,11,15], target: 9 }
            output: [0,1]
            explanation: 2 + 7 = 9
          - name: negative-values
            input: { nums: [-3,4,3,90], target: 0 }
            output: [0,2]
        hints:
          - "Store complements: for x at i, you need target - x seen earlier."
          - "One pass is enough; check before inserting current index."
        starter_code: |
          def twoSum(nums, target):
              # Your code here
              pass
        language: "python"
        starter_code_javascript: |
          function twoSum(nums, target) {
              // Your code here
          }
        starter_code_java: |
          public class Main {
              public static void main(String[] args) {
                  // You can test your solution here
                  System.out.println("Hello Java");
              }
              
              // Implement your solution API
              public static int[] twoSum(int[] nums, int target) {
                  // Your code here
                  return new int[0];
              }
          }
        starter_code_cpp: |
          #include <vector>
          using namespace std;
          
          class Solution {
          public:
              vector<int> twoSum(vector<int>& nums, int target) {
                  // Your code here
                  return {};
              }
          };
        starter_code_typescript: |
          function twoSum(nums: number[], target: number): number[] {
              // Your code here
              return [];
          }
        starter_code_go: |
          package main
          import "fmt"
          
          func main() {
              fmt.Println("Hello from Go")
          }
          
          func twoSum(nums []int, target int) []int {
              // Your code here
              return []int{}
          }
        starter_code_c: |
          #include <stdio.h>
          #include <stdlib.h>
          
          int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
              // Your code here
              *returnSize = 2;
              return malloc(2 * sizeof(int));
          }
          
          int main() {
              printf("Hello from C\n");
              return 0;
          }
        starter_code_csharp: |
          using System;
          
          class Program {
              static void Main() {
                  Console.WriteLine("Hello from C#");
              }
              
              public static int[] TwoSum(int[] nums, int target) {
                  // Your code here
                  return new int[0];
              }
          }
        starter_code_kotlin: |
          fun main() {
              println("Hello from Kotlin")
          }
          
          class Solution {
              fun twoSum(nums: IntArray, target: Int): IntArray {
                  // Your code here
                  return intArrayOf()
              }
          }
        starter_code_ruby: |
          def two_sum(nums, target)
              # Your code here
              []
          end
        starter_code_perl: |
          sub two_sum {
              my ($nums, $target) = @_;
              # Your code here
              return ();
          }

  - difficulty: medium
    problems:
      - title: "3Sum"
        statement: |
          Given an integer array nums, return all the unique triplets [nums[i], nums[j], nums[k]] such that
          i != j, i != k, j != k, and nums[i] + nums[j] + nums[k] == 0.
          The solution set must not contain duplicate triplets.
        input_format: |
          - nums: integer array (length 0..1e4, |nums[i]| <= 1e9)
        output_format: |
          - list of triplets, each a list of three integers in non-decreasing order
          - no duplicate triplets; order of triplets does not matter
        examples:
          - input: { nums: [-1,0,1,2,-1,-4] }
            output: [[-1,-1,2],[-1,0,1]]
            explanation: "Triplets summing to 0 with no duplicates."
          - input: { nums: [] }
            output: []
          - input: { nums: [0,0,0,0] }
            output: [[0,0,0]]
        hints:
          - "Sort first; for each i, move l/r toward center based on sum; skip duplicates for i, l, and r."
          - "Early break/continue: if nums[i] > 0 then stop; if i>0 and nums[i]==nums[i-1], continue."
        starter_code: |
          def threeSum(nums):
              # Your code here
              pass
        language: "python"
        starter_code_javascript: |
          function threeSum(nums) {
              // Your code here
              return [];
          }
        starter_code_java: |
          import java.util.*;
          
          public class Main {
              public static void main(String[] args) {
                  System.out.println("Hello Java");
              }
              
              public static List<List<Integer>> threeSum(int[] nums) {
                  // Your code here
                  return new ArrayList<>();
              }
          }
        starter_code_cpp: |
          #include <vector>
          using namespace std;
          
          class Solution {
          public:
              vector<vector<int>> threeSum(vector<int>& nums) {
                  // Your code here
                  return {};
              }
          };
        starter_code_typescript: |
          function threeSum(nums: number[]): number[][] {
              // Your code here
              return [];
          }
        starter_code_go: |
          package main
          import "fmt"
          
          func main() {
              fmt.Println("Hello from Go")
          }
          
          func threeSum(nums []int) [][]int {
              // Your code here
              return [][]int{}
          }
        starter_code_c: |
          #include <stdio.h>
          #include <stdlib.h>
          
          int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
              // Your code here
              *returnSize = 0;
              return NULL;
          }
          
          int main() {
              printf("Hello from C\n");
              return 0;
          }
        starter_code_csharp: |
          using System;
          using System.Collections.Generic;
          
          class Program {
              static void Main() {
                  Console.WriteLine("Hello from C#");
              }
              
              public static IList<IList<int>> ThreeSum(int[] nums) {
                  // Your code here
                  return new List<IList<int>>();
              }
          }
        starter_code_kotlin: |
          fun main() {
              println("Hello from Kotlin")
          }
          
          class Solution {
              fun threeSum(nums: IntArray): List<List<Int>> {
                  // Your code here
                  return listOf()
              }
          }
        starter_code_ruby: |
          def three_sum(nums)
              # Your code here
              []
          end
        starter_code_perl: |
          sub three_sum {
              my ($nums) = @_;
              # Your code here
              return ();
          }

  - difficulty: hard
    problems:
      - title: "Median of Two Sorted Arrays"
        statement: |
          Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two.
          The overall run time complexity should be O(log(min(m,n))).
        input_format: |
          - nums1: sorted int array
          - nums2: sorted int array
        output_format: "float (median)"
        examples:
          - input: { nums1: [1,3], nums2: [2] }
            output: 2.0
          - input: { nums1: [1,2], nums2: [3,4] }
            output: 2.5
        hints:
          - "Search cut i in smaller array; j = half - i. Compare borders L1,R1,L2,R2."
          - "Odd length: max(L1,L2); even length: average of max(L*) and min(R*)."
        starter_code: |
          def findMedianSortedArrays(nums1, nums2):
              # Your code here
              pass
        language: "python"
        starter_code_javascript: |
          function findMedianSortedArrays(nums1, nums2) {
              // Your code here
              return 0;
          }
        starter_code_java: |
          public class Main {
              public static void main(String[] args) {
                  System.out.println("Hello Java");
              }
              
              public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
                  // Your code here
                  return 0.0;
              }
          }
        starter_code_cpp: |
          #include <vector>
          using namespace std;
          
          class Solution {
          public:
              double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
                  // Your code here
                  return 0.0;
              }
          };
        starter_code_typescript: |
          function findMedianSortedArrays(nums1: number[], nums2: number[]): number {
              // Your code here
              return 0;
          }
        starter_code_go: |
          func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
              // Your code here
              return 0.0
          }
        starter_code_c: |
          double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
              // Your code here
              return 0.0;
          }
        starter_code_csharp: |
          public class Solution {
              public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
                  // Your code here
                  return 0.0;
              }
          }
        starter_code_kotlin: |
          class Solution {
              fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {
                  // Your code here
                  return 0.0
              }
          }
        starter_code_ruby: |
          def find_median_sorted_arrays(nums1, nums2)
              # Your code here
              0.0
          end
        starter_code_perl: |
          sub find_median_sorted_arrays {
              my ($nums1, $nums2) = @_;
              # Your code here
              return 0.0;
          }
